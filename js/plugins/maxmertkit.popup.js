// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function() {
    var Popup, _defaults, _name;
    _name = 'popup';
    _defaults = {
      placement: 'top',
      offset: [0, 0],
      autoOpen: false,
      template: '<div class="js-content"></div>',
      onlyOne: false,
      content: null,
      header: null,
      trigger: 'click',
      delay: 0
    };
    Popup = (function(_super) {

      __extends(Popup, _super);

      function Popup(element, options) {
        this.element = element;
        this.$el = $(this.element);
        this.name = _name;
        this._setOptions($.extend({}, _defaults, options));
        this.init();
      }

      Popup.prototype._setOption = function(key, value) {
        var events, me;
        me = this;
        switch (key) {
          case 'theme':
            this.$el.removeClass('-' + this.options.theme + '-');
            break;
          case 'enabled':
            if (value) {
              this.$el.removeClass('-disabled-');
            } else {
              this.$el.addClass('-disabled-');
            }
            break;
          case 'trigger':
            events = value.split(/[ ,]+/);
            this.$el.off(this.event('mouseenter'), this.event('mouseleave'), this.event('click'));
            this.options[key] = {
              'in': events[0],
              'out': events[1] !== void 0 && events[1] !== '' ? events[1] : events[0]
            };
            switch (this.options[key]["in"]) {
              case 'hover':
                this.$el.on(me.event('mouseenter'), function(event) {
                  if (me.state === 'closed') {
                    return me.open();
                  }
                });
                break;
              default:
                this.$el.on(me.event(this.options[key]["in"]), function(event) {
                  if (me.state === 'closed') {
                    me.open();
                  }
                  return event.preventDefault();
                });
            }
            switch (this.options[key].out) {
              case 'hover':
                this.$el.on(me.event('mouseleave'), function(event) {
                  if (me.state === 'open') {
                    return me.close();
                  }
                });
                break;
              default:
                this.$el.on(me.event(this.options[key].out), function(event) {
                  if (me.state === 'open') {
                    me.close();
                  }
                  return event.preventDefault();
                });
            }
        }
        return this.options[key] = value;
      };

      Popup.prototype.init = function() {
        this.state = 'closed';
        if (this.options.template.charAt(0) !== '.' || this.options.template.charAt(0) !== '#') {
          this.$popup = $(this.options.template);
        } else {
          this.$popup = $($(this.options.template).html());
          $('body').append(this.$popup);
        }
        if ($.popup === void 0) {
          $.popup = [];
        }
        if (this.element !== void 0) {
          $.popup.push(this.element);
        }
        this.timeout = void 0;
        if (this.options.autoOpen) {
          this.open();
        }
        return this;
      };

      return Popup;

    })($.kit);
    return $.fn[_name] = function(options) {
      return this.each(function() {
        if (!$.data(this, 'kit-' + _name)) {
          return $.data(this, 'kit-' + _name, new Popup(this, options));
        }
      });
    };
  });

}).call(this);
