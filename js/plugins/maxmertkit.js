// Generated by CoffeeScript 1.4.0
(function() {

  jQuery(function() {
    var _defaults, _name;
    _name = 'kit';
    _defaults = {
      enabled: true,
      theme: 'dark'
    };
    return $.kit = (function() {

      function kit(el, options) {
        this.el = el;
        this.$el = $(this.el);
        this.name = _name;
        this.options = $.extend({}, _defaults, options);
        this.init();
      }

      kit.prototype._setOptions = function(options) {
        var me, newFunction;
        me = this;
        newFunction = function() {};
        if (this.options === void 0) {
          this.options = {};
        }
        return $.each(options, function(key, value) {
          me._setOption(key, value);
          if ($.isFunction(value)) {
            newFunction[key] = value;
            return me._setFunctions(newFunction);
          }
        });
      };

      kit.prototype._setFunctions = function(newFunctions) {
        var me;
        me = this;
        return $.each(newFunctions, function(event, func) {
          return me.$el.bind(event + '.' + me.name, func);
        });
      };

      kit.prototype.enable = function() {
        return this._setOption('enabled', true);
      };

      kit.prototype.disable = function() {
        return this._setOption('enabled', false);
      };

      kit.prototype.event = function(name) {
        return name + '.' + this.name;
      };

      kit.prototype.getState = function() {
        return this.state;
      };

      kit.prototype._getInstance = function(el) {
        return $.data($(el)[0], 'kit-' + this.name);
      };

      kit.prototype._getInstances = function(instances) {
        var me;
        me = this;
        return $.grep(instances, function(el) {
          return me._getInstance(el) !== me;
        });
      };

      kit.prototype._removeInstance = function(instances) {
        var ax, instance, instancesToRemove, removeLength;
        instancesToRemove = arguments.splice(0, 1);
        removeLength = instancesToRemove.length;
        while (removeLength && instances.length) {
          instance = instancesToRemove[--removeLength];
          while ((ax = instances.indexOf(instance)) !== -1) {
            instances.splice(ax, 1);
          }
        }
        return this;
      };

      return kit;

    })();
  });

}).call(this);
