// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jQuery(function() {
    var Popup, defaults;
    defaults = {
      placement: 'top',
      offset: [0, 0],
      autoOpen: false,
      onlyOne: false,
      closeAfterFocusLoss: true,
      trigger: 'click',
      delay: 0,
      template: null,
      beforeOpen: null,
      open: null,
      openedOrNot: null,
      notOpened: null,
      beforeClose: null,
      close: null,
      closedOrNot: null,
      notClosed: null
    };
    return Popup = (function(_super) {

      __extends(Popup, _super);

      function Popup() {
        return Popup.__super__.constructor.apply(this, arguments);
      }

      Popup.prototype.init = function() {
        this.popup = null;
        if (_isSelector(this.options.template)) {
          this.popup = $($(this.options.template).html());
        } else {
          this.popup = $(this.options.template);
        }
        if (this.popup != null) {
          $('body').append(this.popup);
        }
        if (!($.popup != null)) {
          $.popup = [];
        }
        this.abbys = $.popup;
        this.timer = null;
        return this.setOptions(this.options);
      };

      Popup.prototype._isSelector = function(string) {
        return string.charAt(0) === '.' || string.charAt(0) === '#';
      };

      Popup.prototype.setOption = function(key, value) {
        var events,
          _this = this;
        if ((key != null) && (value != null)) {
          switch (key) {
            case 'theme':
              this.popup.removeClass("-" + this.options.theme + "-").addClass("-" + value + "-");
              break;
            case 'placement':
              this.popup.removeClass("_" + this.options.placement + "_").addClass("_" + value + "_");
              break;
            case 'trigger':
              events = value.split('/[ ,]+/');
              if (typeof (this.options[key]['in'] != null)) {
                this.$el.off("mouseenter." + this.name + ", click." + this.name);
              }
              if (typeof (this.options[key]['out'] != null)) {
                this.$el.off("mouseleave." + this.name + ", click." + this.name);
              }
              this.options[key] = {
                'in': events[0],
                'out': events[1] != null ? events[1] : events[0]
              };
              switch (this.options[key]['in']) {
                case 'hover':
                  this.$el.on("mouseenter." + this.name, function(event) {
                    if (_this.state === 'closed') {
                      return _this.open();
                    }
                  });
                  break;
                default:
                  this.$el.on("" + this.options[key]['in'] + "." + this.name, function(event) {
                    if (_this.state === 'closed') {
                      return _this.open();
                    }
                  });
              }
              switch (this.options[key]['out']) {
                case 'hover':
                  this.$el.on("mouseleave." + this.name, function(event) {
                    if (_this.state === 'opened') {
                      return _this.close();
                    }
                  });
                  break;
                default:
                  this.$el.on("" + this.options[key]['out'] + "." + this.name, function(event) {
                    if (_this.state === 'opened') {
                      return _this.close();
                    }
                  });
              }
              break;
            case 'animation':
              if (!(($.easing != null) && value in $.easing)) {
                if (value in ['scaleIn', 'growUp', 'rotateIn', 'dropIn']) {
                  this.popup.removeClass("-mx-" + this.options.animations).addClass("-mx-" + value);
                }
              }
          }
          if (key !== 'trigger') {
            return this.options[key] = value;
          }
        }
      };

      return Popup;

    })($.kit);
  });

}).call(this);
